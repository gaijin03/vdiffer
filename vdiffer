#!/usr/bin/perl -w
use strict;
use Getopt::Long;

#Author Brian Christiansen
# USAGE: [--revision <revision>] [--vim] [FILE]
# default is to use gvim but will use vim if ssh'ed in.

my @diffs;
my @modFiles;
my $tmpOrig = "tmporig";
my $tmpFile = "tmpfile";
my $tmpDiff = "tmpdiff";
my $vim; #default gvim
my $cached; #default gvim
my $revision;

GetOptions ("vim" => \$vim,
            "cached" => \$cached,
            "revision=s" => \$revision)
or die "Error in command line arguments";

my $cached_str = "";
if (defined $cached) {
  $cached_str = "--cached";
}

$vim = 1 if (defined $ENV{"SSH_CONNECTION"});

if ($ARGV[0]) {
  my $file = $ARGV[0];
  die "$file doesn't exist. $!\n" unless (-e $file);
  DiffFile($file);
} else {
  my $diffcmd;

  if (defined $revision) {
    $diffcmd = "git diff $revision";
  } else {
    $diffcmd = "git diff $cached_str";
  }

  @diffs = `$diffcmd`;
  map { push @modFiles, $1 if m/^--- a\/(\S+)\s+/ } @diffs;
  foreach my $file (@modFiles){
    DiffFile($file);
  }
}

exit 0;

sub DiffFile
{
  my $file = $_[0];
  my $diffCmd = "";

  # need current file with changes.
  #`cp $file $tmpFile`;
  `git show HEAD:$file > $tmpFile`;

  if (!$revision) {
    `git diff $cached_str $file > $tmpDiff`;
  } else {
    `git diff $revision $file > $tmpDiff`;
  }
  # Revert changes on current file to see differences.
  `patch -R -p1 $tmpFile $tmpDiff`;

  if (defined $vim) {
    $diffCmd = "vimdiff";
  } else {
    # -f prevents gvim from forking
    $diffCmd = "gvimdiff -f";
  }

  # When diffing local changes the original must be used so
  # changes can be made in the original.
  system("$diffCmd $file $tmpFile");
}

